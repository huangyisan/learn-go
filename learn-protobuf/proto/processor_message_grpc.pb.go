// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package my_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CPUServiceClient is the client API for CPUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CPUServiceClient interface {
	Hi(ctx context.Context, in *CPU, opts ...grpc.CallOption) (*CPU, error)
}

type cPUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCPUServiceClient(cc grpc.ClientConnInterface) CPUServiceClient {
	return &cPUServiceClient{cc}
}

func (c *cPUServiceClient) Hi(ctx context.Context, in *CPU, opts ...grpc.CallOption) (*CPU, error) {
	out := new(CPU)
	err := c.cc.Invoke(ctx, "/CPUService/Hi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPUServiceServer is the server API for CPUService service.
// All implementations must embed UnimplementedCPUServiceServer
// for forward compatibility
type CPUServiceServer interface {
	Hi(context.Context, *CPU) (*CPU, error)
	mustEmbedUnimplementedCPUServiceServer()
}

// UnimplementedCPUServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCPUServiceServer struct {
}

func (UnimplementedCPUServiceServer) Hi(context.Context, *CPU) (*CPU, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hi not implemented")
}
func (UnimplementedCPUServiceServer) mustEmbedUnimplementedCPUServiceServer() {}

// UnsafeCPUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CPUServiceServer will
// result in compilation errors.
type UnsafeCPUServiceServer interface {
	mustEmbedUnimplementedCPUServiceServer()
}

func RegisterCPUServiceServer(s grpc.ServiceRegistrar, srv CPUServiceServer) {
	s.RegisterService(&CPUService_ServiceDesc, srv)
}

func _CPUService_Hi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPU)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPUServiceServer).Hi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CPUService/Hi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPUServiceServer).Hi(ctx, req.(*CPU))
	}
	return interceptor(ctx, in, info, handler)
}

// CPUService_ServiceDesc is the grpc.ServiceDesc for CPUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CPUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CPUService",
	HandlerType: (*CPUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hi",
			Handler:    _CPUService_Hi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/processor_message.proto",
}
